OS:Windows 8
JVM:Oracle Corporation 1.7.0_51
CPU:Intel64 Family 6 Model 58 Stepping 9, GenuineIntel os-arch:AMD64
Cores (incl HT):8
1.7.0_51-b13,Java HotSpot(TM) 64-Bit Server VM,Windows 8

================================
Test Class: FrequentPrimitives[]
================================
A array[10] of objects with a typical distribution of primitve fields: 2 short Strings, 3 boolean, 6 ints, 2 long, one double.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                          3634           2709           6343            836
Kryo 2.23                                    3684           3027           6711            708
</pre>


==============================================
Test Class: FrequentPrimitivesExternalizable[]
==============================================
A class with a typical distribution of primitve fields: 2 short Strings, 3 boolean, 6 ints, 2 long, one double. But implementing Externalizable


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                          2204           1763           3967            864
Kryo 2.23                                    3676           3169           6845            722
</pre>


===============================
Test Class: FrequentCollections
===============================
Measures serialization of most popular collection classes. (HashMap and an ArrayList filled with Integer and Long).


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         20386          16583          36969           4671
Kryo 2.23                                   30103          21660          51763           4612
</pre>


=============================
Test Class: LargeNativeArrays
=============================
measures performance serializing a large int array, a large long array and a large double array filled with random values. Note that random values destroy any value compression, so the increased size of kryo in this test will not be observable in most real world data.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         36272          38852          75124          35119
Kryo 2.23                                   50787          45204          95991          34949
</pre>


=============================
Test Class: StringPerformance
=============================
measures serialization of mid size to very long Strings


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         28731          25929          54660          20020
Kryo 2.23                                   71064          43090         114154          17716
</pre>


======================
Test Class: Primitives
======================
A broad test of primitive values and specials such as Enums, EnumSets, Date, String, byte, short, int, .. Byte, Character; Short, Integer, .. 
 plus opaque private field with same name in a private subclass


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         11436          12111          23547           1469
Kryo 2.23 FAIL                                  0              0              0              0
</pre>


====================
Test Class: Arrays[]
====================
Tests various arrays of int, Dimension, Date, Object. Nested arrays, multidimensional arrays.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         57355          51261         108616          10297
Kryo 2.23                                   70747          65161         135908           9681
</pre>


=============================
Test Class: CommonCollections
=============================
In depth test of collections incl. collections of collections.
 (ArrayList, ArrayDeque, ConcurrentLinkedQueue, Vector, TreeSet, LinkedList, TreeMap, ConcurrentHashMap, Hashtable, HashMap). Note: has been modified to workaround Kryo-specific Issue.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         62951          58136         121087           8496
Kryo 2.23                                  125214          57980         183194           8323
</pre>


==================
Test Class: Trader
==================
Measures serialization of a typical 'Enterprise-Object' using Value-Classes instead of primitive tpyes.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         63025          52832         115857           5253
Kryo 2.23                                   81063          75706         156769           5919
</pre>


=======================
Test Class: ManyClasses
=======================
Tests speed serializing a complex object graph of many different classes with few primitive fields.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                          6465           3551          10016            986
Kryo 2.23                                    8049           5564          13613           1220
</pre>


==============================
Test Class: ExternalizableTest
==============================
Performance of Externalizable objects.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         66053          74481         140534           7772
Kryo 2.23                                   87122          84314         171436           4733
</pre>


=====================
Test Class: BigObject
=====================
A bigger object graph consisting of some of the test objects at once


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                       3531649        3524701        7056350         363958
Kryo 2.23                                 4780079        3850708        8630787         322340
</pre>


========================
Test Class: HeavyNesting
========================
Heavily nested Objects


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         62015          70891         132906           3747
Kryo 2.23                                   71333          78415         149748           5009
</pre>


==================
Test Class: String
==================

<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                           180            157            337              2
Kryo 2.23                                     100             97            197              2
</pre>


===========================
Test Class: ShortRemoteCall
===========================
measures overhead of stream initialization+classname decoding. Only one very short object is serialized


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                           263            203            466             15
Kryo 2.23                                     352            280            632             32
</pre>


======================
Test Class: SmallThing
======================
only one int. benches pure init time


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                           160            159            319              2
Kryo 2.23                                     123            109            232              2
</pre>

